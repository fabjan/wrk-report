// Code generated by go-bindata.
// sources:
// hdrhistogram.template
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hdrhistogramTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x5a\x7b\x73\xdb\x36\x12\xff\xdf\x9f\x62\xcd\xbb\x86\xd4\x59\x22\xe5\xb6\xd3\x69\x64\xc9\x1d\xc7\x4e\x52\xdf\xf8\x52\x4f\xec\xe4\x7a\xa3\xa8\x29\x44\x42\x14\x1c\x08\xd0\x01\xa0\x1e\xe7\xf8\xbb\xdf\x00\x20\x29\x4a\x7c\x48\xce\x94\xff\xd8\x24\x77\x17\x3f\x2c\xf6\x4d\xf5\xa7\x6a\x46\xcf\x8f\xfa\x53\x8c\xa2\xf3\x23\x00\x80\xfe\x0c\x2b\x04\xe1\x14\x09\x89\xd5\xc0\xf9\x70\xff\xa6\xf3\xb3\x93\xbe\x92\x6a\x4d\x31\xa8\xf5\x1c\x0f\x1c\x85\x57\x2a\x08\xa5\x4c\xdf\xe9\x2b\x22\x0b\x7f\x4a\xa4\xe2\xf0\x98\x3f\xd3\xd7\x82\x48\x32\x26\x94\xa8\x75\x0f\xa6\x24\x8a\x30\xcb\x5f\x3f\x59\xc1\x81\x91\x9c\xae\x72\xdc\xe9\xdc\x70\x14\x81\x9a\x62\xb8\xf8\xe7\xc5\xef\x70\x71\x7b\xdd\xe9\x64\x10\x42\x41\xe6\xaa\x88\xe1\x01\x2d\x90\x7d\xea\x80\x14\xe1\xc0\x99\x2a\x35\x97\xbd\x20\x58\x2e\x97\x7e\xcc\x79\x4c\xb1\x1f\xf2\x59\xf0\x20\xd1\x9c\x38\xe7\xfd\xc0\x12\x1f\x22\x6f\xb3\x35\x6f\x92\xb0\x50\x11\xce\xc0\x6b\xed\xee\x0e\x09\xe0\x89\xfa\x3b\x0c\x8c\x14\x3e\x01\xbc\x9a\x73\xa1\x24\x1c\x0f\xc0\x4d\x58\x84\x27\x84\xe1\xc8\x85\x17\x2f\xf2\x37\x5f\xbf\x82\x9a\x12\x79\x76\x54\x92\x14\xf1\x50\x4b\x81\x01\xb8\xfd\x5f\x56\x33\x0a\x0b\x2c\x24\xe1\x6c\xe0\x9c\xfa\x5d\x07\xa4\x42\x2c\x42\x94\x33\x3c\x70\x18\x77\x7e\x39\xef\x1f\x5f\xfd\x76\x79\xff\x9f\xdb\xd7\x20\x17\x31\xdc\x7e\x78\x75\x73\x7d\x09\x4e\x27\x08\xfe\xfd\xc3\x65\x10\x5c\xdd\x5f\xc1\xdd\xc7\xb7\x70\xea\x9f\x06\xc1\xeb\x77\x0e\x18\xe5\xa4\xba\x59\xfe\xe0\x73\x11\x07\x6f\x05\x9a\x4f\x49\x28\x83\xbb\x8f\x6f\x03\x4d\x78\x75\x7f\x15\xc8\x45\x7c\x7a\xea\x47\x2a\x72\xce\xdd\x1d\x94\xb9\x26\x08\xa3\x84\xe1\xeb\x19\x8a\xb1\xf4\x42\x44\xe9\x18\x85\x5f\x76\xb5\x93\xed\x8b\x18\x32\x18\xe8\x0d\x26\x33\xcc\x94\xff\xdf\x04\x8b\xf5\x1d\xa6\x38\x54\x5c\x5c\x50\xea\xb9\x7a\x07\x86\xce\x6d\x9d\x55\x0a\xa1\x78\xa2\x60\x90\xca\xf2\x29\x66\xb1\x9a\x96\x29\xc9\x04\x3c\x4b\x39\x80\x6e\x15\x1e\x7d\x65\x78\xbd\x8a\xa5\x9e\x4a\x4f\x26\x5c\x80\x67\xb6\x01\x03\xe8\x9e\x01\x81\xfe\x0e\x0a\x20\x27\x27\x75\x6b\x15\x8c\xc7\x30\xd5\xd1\x65\xe0\x0d\x91\x1f\x63\x75\xa1\x94\x20\xe3\x44\x61\xcf\x5d\x51\xc2\xbe\xf4\xa6\x02\x4f\xdc\x56\x13\x7f\xa6\x2a\x4d\x99\xa9\xaa\x41\x94\xbf\x40\x34\xc1\x65\x15\xec\x42\x0a\xfe\xd0\x86\x13\xf8\x0a\x4b\xe5\x69\xd6\x96\x36\xe7\x63\x8f\xe1\x25\xbc\xc7\xf1\xeb\xd5\xdc\x73\xff\x70\xe1\x04\x96\x84\x45\x7c\xe9\x53\x1e\x22\xbd\x63\x7f\xca\xa5\x6a\x15\xd8\xf6\x82\xd7\x97\x9a\x0a\xbe\x04\x2d\xfb\xb5\x10\x5c\x78\xce\x25\x62\x8c\x2b\x10\x98\x45\x58\x00\x9e\x8d\x71\x14\xe1\x28\x33\x2a\xbd\x1f\xc2\x62\x50\x1c\xf0\x4a\x61\xc1\x10\x05\xbd\xae\xf4\x9d\x8a\xd3\x2d\x5e\xe5\x93\xde\xff\x46\x6b\x37\x44\x6c\x81\xb6\xac\x39\x14\x18\x29\xfc\x9a\x62\x7d\xe7\xb9\x96\xa0\xca\x8e\xb7\xc4\xa8\x15\x0c\x52\x61\xfa\x90\x2e\x39\xd3\x21\xc8\x73\xbf\x8f\xf6\xb1\x92\x59\x0c\x03\xa3\x22\xe3\x80\x55\x66\x9c\x5d\x64\x16\xfb\x52\x84\x07\x58\x43\xb3\x0c\xce\xa8\x0e\xcb\x03\xa8\x8f\x85\xbb\x57\xba\xb5\x25\x89\xd4\xd4\xac\x1f\xdb\xff\x9b\x4f\x25\xe5\x9a\x62\x12\x4f\x55\xca\x66\x6f\xf6\xf0\xa9\x95\x1f\x09\xb4\xb4\x1a\x21\xb3\xb8\x0d\xdd\x36\x74\xf7\xd8\x80\x55\x8a\xac\x53\x4a\x3b\x83\xa3\xf8\x15\x52\xe8\xc3\xfb\x1b\xcf\x35\x2c\xc1\x9c\xc5\x6e\x6b\x8f\x70\x1d\x87\x3a\x9d\xfd\xfe\xb5\x37\x5e\x6d\xed\xb3\x21\x76\x15\xaf\xe7\x5a\xf7\x53\xcb\x86\x1e\x39\x24\xa3\xbd\x61\xf1\xa9\x26\x2b\x98\x4c\x2e\xbd\x88\xcf\xea\x52\x41\x28\xb5\xe7\x38\x4e\x75\x8c\x97\x53\x8c\xd5\x96\x6b\x19\x89\x77\xe6\x71\x99\xa5\x2a\x32\x5b\x11\x87\x44\x66\xcd\x28\x12\x6a\x12\x93\xe5\x1a\x92\x91\x1f\x4a\xf9\x5e\x3f\xac\xd6\xae\x3e\x2e\xcb\x73\x3c\x00\x96\x50\xda\x74\x64\x39\xbc\x07\x0b\xef\x01\xfa\x76\xc1\x1c\xdd\x43\x3d\xba\x5d\x94\x30\xb0\xbc\xc3\x87\xd1\x7e\x8b\xb2\xb5\x88\x41\x6a\x35\xd8\xd2\x78\x9d\xbc\x1e\x71\x0e\xb2\x34\x29\xe1\xc4\xae\xea\xcb\x34\x55\xdf\xe3\x95\x82\x13\x70\xe0\x11\x1c\x38\x81\xcd\x02\x5a\x6f\xf9\xcb\xa7\x4f\xac\xe2\x80\x8b\xd7\xb3\xad\xb3\xc2\x20\xab\x2d\xa8\x21\x2e\x1b\xa0\x55\x81\x4e\xee\x44\x00\xad\x3e\xb7\x0d\x6e\x56\xe6\x56\xf3\x10\xc6\xb0\xf8\xf5\xfe\x5f\x37\xda\xa0\xfb\xc7\xc3\xcb\xab\x8b\xfb\x8b\xe1\x27\xa6\x15\x63\x74\x07\xce\x27\x36\x1a\x9d\x3b\x67\xd5\x50\x23\x3c\x69\x42\xab\x5f\x57\x2d\xac\x9f\xfb\x68\x3e\xc7\x2c\xba\x9c\x12\x1a\x79\xb2\x82\x48\x60\x95\x08\x66\x68\xcf\x9a\x3c\x57\xd7\xae\xbe\x5c\xc4\x17\xd2\xc4\x37\x41\xb6\x22\x3c\xa6\x6d\x90\x21\xa2\xf8\x0d\xd2\x87\xdf\x86\x70\x5c\x65\x38\x05\x12\xed\x4a\x85\xbb\xaf\x5f\xe1\xb4\x62\xf7\x5b\xc5\xe3\xfe\x84\x92\x16\xd9\x58\xd4\x6b\xcb\x89\xc8\xa2\x2e\xdf\x9b\xb0\xa3\xab\x66\x18\x00\xa6\xbe\xf9\xf7\x1d\x8f\xb0\xa7\x44\x82\x1b\x78\xb2\xc4\x35\xd7\xdd\xd0\x35\x53\x5e\xad\xcd\x1a\x91\x3b\xa9\xd5\x70\xbb\xad\x5a\x9e\xaf\x5f\x53\x36\xeb\x3e\x86\xbc\x89\xd8\x9c\x94\x29\x13\x66\xf3\x44\xe1\xe8\x4e\xb3\x79\x98\xb6\xf4\xc3\x5b\xc1\xe7\x58\xa8\xf5\x47\x5d\xd0\x35\xaf\xdd\xb0\xe1\x3c\xe7\x7e\xdb\x8e\x2d\xfb\xe1\x5b\xb6\xf4\x7f\xd5\x9e\x1b\x57\x6f\x55\x18\x61\xb6\xeb\xd5\x8c\x32\x93\x93\xca\xdd\xd1\xf7\xdd\x6e\x37\x30\xef\x83\x2a\x27\xde\x28\x62\x2b\x7c\x38\x69\xd7\xe6\xb4\xc1\x39\xf5\x4f\xeb\xcc\xb2\xcc\xf9\xee\xce\x33\x8b\xb5\xc1\x31\x7f\xb5\x80\x1a\x50\x72\x11\x7f\xbb\xdc\x9e\xa9\x70\xaa\xa5\x9f\xbe\x7c\xf9\x32\xb0\xef\x0f\x96\xef\x39\xc6\xe0\x9c\x76\xea\x32\xff\x28\xc6\x80\x67\x48\xb1\x47\xe8\xb4\x33\x43\xfc\x56\x39\x0b\x82\x97\xaf\xf8\x4a\x6f\xb0\x0b\x5d\x93\xa8\x2c\x30\x9d\x9b\xf4\x9d\x95\x5f\x23\xd1\x44\x9a\xad\x00\x6b\xd6\xa8\x33\x21\x0b\x80\x30\x89\x85\x7a\x85\x27\x5c\x60\x2f\xad\x82\x2c\x5b\x3b\xa5\x98\x10\x21\x95\x91\xd7\x64\x8c\xba\x0b\x1e\xe4\x73\x80\x93\x14\x4c\x9e\x69\xea\x7d\x37\x31\xa1\xdb\x8d\x90\x42\x3d\x5b\xa1\xca\x45\x7c\xb2\x9a\xd1\xb3\x31\x92\xf8\xa7\x1f\xdb\x85\xfe\x6c\xac\x38\xf2\x12\x86\x65\x88\xe6\xd8\xc3\x2c\xe4\x11\xfe\xf0\xfe\x5a\x7b\x19\x67\x3a\x9a\xca\x45\xdc\xaa\x2b\x6e\x75\x79\x51\x9d\x06\x72\x8d\x8c\xbd\x44\x90\x1a\xf6\x8a\x44\xde\x3a\x20\x43\xa1\x05\xbe\xd3\x59\xea\x96\xc5\xa5\x0c\xc5\xd0\x0c\x6f\xe5\xa9\x2a\x70\xa5\x44\x57\x4e\x6e\x1b\xa9\x1a\x7e\x43\x2e\x32\xfa\x3d\xa4\x01\x4b\xbb\x0b\xd3\x7e\x25\x82\x34\x11\x3d\xb3\xbf\xfa\x8b\xfa\xd0\x52\x8b\xa6\xa1\xec\x69\xd2\xca\x0d\x9a\x66\xda\xd7\xa2\x19\xc0\xb6\xc3\xfd\x96\xae\x37\x65\xdd\xea\xf0\x50\x8c\xf3\x1e\xaf\x71\x5d\xd4\xa0\x23\xd4\xb4\x2a\xf2\x23\xbe\xcc\x0e\x46\x9b\x59\x13\x69\x3a\x74\x69\x6c\x18\xeb\xf9\x73\x7c\x63\x1e\xad\xb7\xa2\x0f\x6a\x04\x18\x52\x52\xdf\x0b\x1e\xe2\x6c\x9b\x37\x99\x94\xe7\x0d\x49\x73\x01\x3a\x30\xa4\x01\xe6\x0d\xa1\x18\x5e\xbc\x80\xc2\xed\x7b\x8c\x22\x2c\x76\x1e\xde\x10\xa9\x0a\x8f\x5e\x51\x5e\x0a\x2c\x41\x00\x6f\xf5\x89\x81\x4c\xc2\x10\x4b\x79\x0c\x17\x94\x9a\xe9\xb0\x59\xe4\xe2\xf6\x5a\x02\x12\x18\x64\x32\x9f\x73\xa1\x70\xe4\x6f\x76\x04\x98\x4a\xbc\x23\x0f\x51\x2c\x94\xe7\xde\x97\x04\x30\xae\x60\x92\x50\xba\xde\x88\x02\xc2\xcc\xa4\x16\xc6\x82\x2f\x25\x16\x7e\xf1\x00\x0b\x61\x2a\x08\x20\x9f\x59\x7f\x24\x32\x41\x94\xfc\xcf\x0c\xc0\xb4\x74\x40\xcc\xbe\x99\x13\x1c\x4e\x91\x50\x30\x47\xe1\x17\xed\x32\x39\x7f\x3a\xa7\xd6\x76\xe6\xb9\x8b\xa2\x00\xdd\x84\x9c\xfa\x5d\xb7\x0d\x8f\x6e\xca\x26\xdd\x1e\x0c\xdd\x90\x0b\x2b\xcd\x1d\x3d\x15\xcd\x5f\xab\x8b\xf2\x31\xa2\xa0\x33\x01\x48\x2c\x08\x96\xf9\x5b\xd3\x75\x20\x85\xee\xcc\xe3\xcf\x3a\x94\x0e\x47\x05\xee\x3c\xf6\x68\x37\xbb\xd4\xe2\x4d\x10\xda\x52\xa0\x3e\xe6\xa2\x8c\xb4\x97\xad\x9d\x5f\xd8\x4e\xa4\x31\xc4\x67\xb0\x60\x90\xa9\x62\x4b\x09\x3e\x12\x02\xad\xef\x8d\x43\xdd\xa3\x31\xc5\x5b\xeb\xef\x3a\xbf\x16\xa6\x48\xf8\x45\xc2\xa0\x84\x65\xf8\xb8\xe8\xc1\x69\x1b\x26\x3d\x70\xbb\xdf\xb9\x4f\xed\x4a\xaf\x31\x44\x5d\x4b\xf5\x72\x1f\x59\x46\xf7\x72\x1f\x5d\x4e\xe8\xef\x27\x2d\xd0\x1e\x40\x5c\xa4\x3e\x84\x7c\x8b\x5e\x33\x8c\x2a\x54\xc8\xe7\x5a\xf5\x3a\xbb\x94\x8f\x54\x11\x45\x71\x0f\xdc\x5f\x89\x54\x3c\x16\x68\xe6\x96\x97\x34\x49\xa4\x07\x3f\x77\xbb\xe5\x77\x36\x57\xf4\xe0\xc7\x9f\xab\x5e\x5e\xac\x88\xec\xc1\x63\xb6\xc8\x2d\x16\x21\x66\x8a\x50\xdd\x91\xcf\x08\x33\xe5\x7e\x4f\xc7\x7d\xca\xe3\x3b\x9d\xbf\x7b\xa0\x1b\xb9\xb6\x3d\xf5\x9e\xfd\x53\xa1\x84\xc5\x8e\xe0\x1b\xa4\x30\x0b\xd7\xe0\xcd\x64\x6b\x5b\x74\x05\x33\xc5\x31\x66\x51\x0f\x1e\xe7\x5c\x12\xad\x99\x1e\xb8\x63\xae\x14\x9f\xb9\x3b\x93\xb1\x0a\x5d\x5a\xb7\xb7\xf5\x42\xa5\x81\xdf\x10\x86\xad\xbb\xe5\x69\x20\xc6\x2a\xcd\x51\xaf\xd6\xd7\x91\xe7\x1a\x19\x9f\x23\xb2\x30\x53\xc7\xdd\x10\x89\xa2\x08\x14\xd7\x67\x36\x97\xb0\x24\x6a\x0a\x21\x17\x02\x87\x0a\xe6\xb9\xfa\xc0\xe4\x5e\xc5\x8d\xab\xf5\xca\x20\x39\x4d\x66\xe6\xc0\x87\xdd\x9d\x09\xd3\xd6\x98\xed\xd4\x8e\xd9\xb4\x10\x0d\xf2\x5d\x32\x1b\x63\xf1\xdb\xe4\xd2\xb2\x7b\xad\xda\x91\x5b\xba\x80\x3f\x4f\xe4\xd4\xab\x2a\x0f\xb7\x08\xaa\x4b\x1f\x9d\x84\x7a\xe0\x4a\x25\x08\x8b\x2b\xac\x4e\x5f\x73\xdb\x17\x12\xac\x0f\xbb\x36\x73\x0a\x6e\x8c\x40\x71\x4e\x15\x99\xbb\xd5\xe9\xb3\x7a\x81\x10\xd1\xb0\x57\xfc\xae\xf3\xd0\x54\xa9\xa5\x93\x98\x0d\x75\xa4\xda\x20\xf8\xf2\x90\xb9\x5f\xe1\xf0\x06\xda\x79\xfd\x2e\x74\xc0\xb3\xff\x04\x10\x19\x2b\xb1\xed\xaf\xe0\x4b\x5d\x08\xed\x99\x09\x67\x53\x21\x65\x2b\x2f\xad\xee\x1b\x34\xc6\x54\xef\xe0\x04\xdc\x1e\xb8\x70\xb2\x77\x2c\xb8\x01\xe5\x2b\x7e\x2b\x70\x48\x74\xb3\xeb\xfd\xd4\x3a\x80\xd7\xfd\xf4\xdd\x27\xd7\x6e\x47\xf7\x23\xa5\x1d\x58\x1c\x30\x93\xd5\x07\x02\x8d\xd3\xeb\x72\xeb\x5f\x5f\xed\x40\xaa\x61\xdd\x2a\x36\x79\xa6\xce\x39\x1f\x09\x5e\x9a\x94\xb3\x23\x4d\xf3\xea\xce\x33\x33\xfd\xd4\x7e\x77\xdd\xd3\x78\xae\x29\x5c\x3d\xcd\xd1\xce\x42\xeb\x56\x2d\x01\xcf\xae\xbb\x32\xde\xdc\xb0\x6c\xcd\x78\x95\xa7\x46\xcf\x7c\x8d\xcf\xda\xa3\x4d\xca\xac\xfa\x84\x6d\xeb\x84\xb3\x9a\xe7\x97\x3c\x61\x3b\xa5\xfd\x76\x15\xb0\xaf\x06\xb0\x62\x74\x68\x19\xba\xbf\xbb\x16\xd2\xa8\x62\x8c\x5d\x58\xce\x44\x9a\xed\xc3\xab\x2a\xe7\xb6\xa4\x6f\x00\xd5\x89\x1e\x76\x47\x36\xbc\x68\x04\x55\x43\xdd\x2d\x00\x1b\x9e\x74\x7f\x9d\x12\xa6\x72\xb0\xa7\x84\x19\x30\x46\xfb\xbe\x9c\x53\xa2\x3c\xe7\x13\x73\xaa\xea\x14\xbb\xc0\x35\x8b\xf0\xaa\xbc\xdf\xaa\x8f\x1b\x46\xf8\xbe\x6f\x1b\x19\x0a\x18\x58\xfa\x21\x19\xf9\x4a\x90\x59\x55\x97\x60\x7c\x40\xfb\x9f\x4c\xa9\x53\xca\x14\x78\x30\x84\xd1\x49\x50\xd5\x5f\x99\xef\x56\x84\xe1\x61\x77\x64\x7e\xea\xf0\x37\xf3\x13\x07\x2b\xaa\x60\x0e\x3f\x96\xea\xc7\xe2\xca\xeb\x6c\xd6\xf8\x86\x72\xa4\x3c\xcb\x3d\xec\x56\x7d\x7f\xca\x58\x56\x95\x2c\x3f\x8c\xea\x7a\x40\x8d\xf3\x98\xc8\x77\xe8\x9d\xb7\xb2\x9f\xad\xed\xcd\xba\x55\x8b\x2c\x63\x2b\x9e\xce\x79\x66\x0d\xe9\xde\xf6\x45\xef\x94\xd8\xd8\xda\x70\x55\xb7\x21\xa8\xfe\x8e\x91\x5d\xcb\xa9\x0e\x95\x29\x8e\x61\x01\x4e\x6e\x90\xfd\xa2\xc5\x1e\x86\x69\x5b\x8e\x75\x86\x84\xd2\x6f\x43\x58\x2b\x72\xdd\x20\xaf\x40\x7d\x72\x72\x70\xe3\xda\xe4\x77\x5b\x8a\xb2\x07\xd6\xdf\x7f\x5e\xcf\xd5\x47\x03\xee\x1d\x3c\x69\x9e\xdd\x8d\xaa\x4f\x15\x9d\x16\x4a\x14\x2f\x4d\x7a\x28\x56\x40\x79\x88\xe8\xe7\xb4\x2d\xfa\xf3\xf1\xd1\xa4\xa2\xa7\xa7\x3f\xcf\xca\x94\x3a\x85\xa7\x44\x26\x9d\x97\xa8\x76\x7a\xbe\x52\xa6\xd8\xac\xd5\xb6\xd2\xda\xb0\xd3\x62\x6d\x49\xdb\x34\x87\xcd\x7b\x8b\xf8\x6b\xf3\x93\x27\x0f\x2f\x70\xd9\x3c\x8b\x33\x3d\xaf\xfa\x87\x41\xe6\x57\x41\x6e\xab\x5d\x6c\x35\x1a\xd2\x66\x3f\xb0\xbf\x64\x3b\xea\x8f\x79\xb4\x06\x3b\x52\x1b\x38\x56\xc5\xce\xf9\x51\xff\xb8\xd3\xb9\x22\x0b\x50\x53\xa4\x60\x49\x28\x85\x29\xa7\x79\x73\x6e\x13\x75\xa7\x73\x7e\xd4\x8f\xc8\x02\x48\x34\x70\xf2\xa2\xdb\x39\xbf\xa5\x18\x49\x0c\xf6\x3b\x28\x20\x1b\xde\x35\x20\x98\x10\x8a\xfb\x41\x44\x16\xe7\x47\xfd\x71\xa2\x14\x67\x36\x67\xbb\xf6\xc6\x05\xce\xcc\x90\x66\xe0\xee\xe8\xc3\x3d\xb7\xb7\x76\x86\xd8\x0f\x2c\xbd\xde\x86\x86\x6f\xb6\x63\x7e\x9f\xf7\xff\x00\x00\x00\xff\xff\x3c\xf4\xd6\x61\xa7\x27\x00\x00")

func hdrhistogramTemplateBytes() ([]byte, error) {
	return bindataRead(
		_hdrhistogramTemplate,
		"hdrhistogram.template",
	)
}

func hdrhistogramTemplate() (*asset, error) {
	bytes, err := hdrhistogramTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hdrhistogram.template", size: 10151, mode: os.FileMode(420), modTime: time.Unix(1573298103, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hdrhistogram.template": hdrhistogramTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"hdrhistogram.template": &bintree{hdrhistogramTemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

