// Code generated by go-bindata.
// sources:
// hdrhistogram.template
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hdrhistogramTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x5a\xfd\x72\xdb\x36\x12\xff\xdf\x4f\xb1\xe6\x5d\x43\xea\x2c\x91\x72\xdb\xe9\x34\xb2\xe4\x8e\x63\x27\xa9\x6f\x7c\xa9\x27\x76\x72\xbd\x51\xd4\x16\x22\x21\x09\x0e\x04\xe8\x00\x50\x1f\xe7\xf8\xb1\xee\x05\xee\xc9\x6e\x00\x90\x14\x29\x7e\x48\xce\x94\xff\xd8\x24\x77\x17\x3f\x2c\xf6\x9b\xea\xcf\xd4\x9c\x9e\x1f\xf5\x67\x18\x45\xe7\x47\x00\x00\xfd\x39\x56\x08\xc2\x19\x12\x12\xab\x81\xf3\xe1\xfe\x4d\xe7\x47\x27\x79\x25\xd5\x86\x62\x50\x9b\x05\x1e\x38\x0a\xaf\x55\x10\x4a\x99\xbc\xd3\x57\x44\x96\xfe\x8c\x48\xc5\xe1\x31\x7b\xa6\xaf\x25\x91\x64\x4c\x28\x51\x9b\x1e\xcc\x48\x14\x61\x96\xbd\x7e\xb2\x82\x03\x23\x39\x59\xe5\xb8\xd3\xb9\xe1\x28\x02\x35\xc3\x70\xf1\xf7\x8b\x5f\xe1\xe2\xf6\xba\xd3\x49\x21\x84\x82\x2c\x54\x1e\xc3\x03\x5a\x22\xfb\xd4\x01\x29\xc2\x81\x33\x53\x6a\x21\x7b\x41\xb0\x5a\xad\xfc\x29\xe7\x53\x8a\xfd\x90\xcf\x83\x07\x89\x16\xc4\x39\xef\x07\x96\xf8\x10\x79\xdb\xad\x79\x93\x98\x85\x8a\x70\x06\x5e\x6b\x77\x77\x48\x00\x8f\xd5\x5f\x61\x60\xa4\xf0\x09\xe0\xf5\x82\x0b\x25\xe1\x78\x00\x6e\xcc\x22\x3c\x21\x0c\x47\x2e\xbc\x78\x91\xbd\xf9\xf2\x05\xd4\x8c\xc8\xb3\xa3\x92\xa4\x88\x87\x5a\x0a\x0c\xc0\xed\xff\xb4\x9e\x53\x58\x62\x21\x09\x67\x03\xe7\xd4\xef\x3a\x20\x15\x62\x11\xa2\x9c\xe1\x81\xc3\xb8\xf3\xd3\x79\xff\xf8\xea\x97\xcb\xfb\x7f\xdd\xbe\x06\xb9\x9c\xc2\xed\x87\x57\x37\xd7\x97\xe0\x74\x82\xe0\x9f\xdf\x5d\x06\xc1\xd5\xfd\x15\xdc\x7d\x7c\x0b\xa7\xfe\x69\x10\xbc\x7e\xe7\x80\x51\x4e\xa2\x9b\xd5\x77\x3e\x17\xd3\xe0\xad\x40\x8b\x19\x09\x65\x70\xf7\xf1\x6d\xa0\x09\xaf\xee\xaf\x02\xb9\x9c\x9e\x9e\xfa\x91\x8a\x9c\x73\x77\x07\x65\xa6\x09\xc2\x28\x61\xf8\x7a\x8e\xa6\x58\x7a\x21\xa2\x74\x8c\xc2\xcf\xbb\xda\x49\xf7\x45\x0c\x19\x0c\xf4\x06\xe3\x39\x66\xca\xff\x77\x8c\xc5\xe6\x0e\x53\x1c\x2a\x2e\x2e\x28\xf5\x5c\xbd\x03\x43\xe7\xb6\xce\x2a\x85\x50\x3c\x51\x30\x48\x64\xf9\x14\xb3\xa9\x9a\x95\x29\xc9\x04\x3c\x4b\x39\x80\x6e\x15\x1e\x7d\xa5\x78\xbd\x8a\xa5\x9e\x4a\x4f\x26\x5c\x80\x67\xb6\x01\x03\xe8\x9e\x01\x81\xfe\x0e\x0a\x20\x27\x27\x75\x6b\xe5\x8c\xc7\x30\xd5\xd1\xa5\xe0\x0d\x91\x3f\xc5\xea\x42\x29\x41\xc6\xb1\xc2\x9e\xbb\xa6\x84\x7d\xee\xcd\x04\x9e\xb8\xad\x26\xfe\x54\x55\x9a\x32\x55\x55\x83\x28\x7f\x89\x68\x8c\xcb\x2a\xd8\x85\x14\xfc\xa6\x0d\x27\xf0\x15\x96\xca\xd3\xac\x2d\x6d\xce\xc7\x1e\xc3\x2b\x78\x8f\xa7\xaf\xd7\x0b\xcf\xfd\xcd\x85\x13\x58\x11\x16\xf1\x95\x4f\x79\x88\xf4\x8e\xfd\x19\x97\xaa\x95\x63\xdb\x0b\x5e\x5f\x6a\x26\xf8\x0a\xb4\xec\xd7\x42\x70\xe1\x39\x97\x88\x31\xae\x40\x60\x16\x61\x01\x78\x3e\xc6\x51\x84\xa3\xd4\xa8\xf4\x7e\x08\x9b\x82\xe2\x80\xd7\x0a\x0b\x86\x28\xe8\x75\xa5\xef\x54\x9c\x6e\xfe\x2a\x9f\xf4\xfe\x37\x5a\xbb\x21\x62\x4b\x54\xb0\xe6\x50\x60\xa4\xf0\x6b\x8a\xf5\x9d\xe7\x5a\x82\x2a\x3b\x2e\x88\x51\x6b\x18\x24\xc2\xf4\x21\x5d\x72\xa6\x43\x90\xe7\x7e\x1b\xed\x63\x25\xf3\x29\x0c\x8c\x8a\x8c\x03\x56\x99\x71\x7a\x91\xf9\xd4\x97\x22\x3c\xc0\x1a\x9a\x65\x70\x46\x75\x58\x1e\x40\x7d\x2c\xdc\xbd\x92\xad\xad\x48\xa4\x66\x66\xfd\xa9\xfd\xbf\xf9\x54\x12\xae\x19\x26\xd3\x99\x4a\xd8\xec\xcd\x1e\x3e\xb5\xf6\x23\x81\x56\x56\x23\x64\x3e\x6d\x43\xb7\x0d\xdd\x3d\x36\x60\x95\x22\xeb\x94\xd2\x4e\xe1\x28\x7e\x85\x14\xfa\xf0\xfe\xc6\x73\x0d\x4b\xb0\x60\x53\xb7\xb5\x47\xb8\x8e\x43\x9d\xce\x7e\xff\xda\x1b\xaf\x0a\xfb\x6c\x88\x5d\xf9\xeb\xb9\xd6\xfd\xd4\xb2\xa1\x47\x0e\xc9\x68\x6f\x58\x7c\xaa\xc9\x0a\x26\x93\x4b\x2f\xe2\xf3\xba\x54\x10\x4a\xed\x39\x8e\x53\x1d\xe3\xe5\x0c\x63\x55\x70\x2d\x23\xf1\xce\x3c\x2e\xb3\x54\x45\x66\x2b\xe2\x90\xc8\xac\x19\x45\x4c\x4d\x62\xb2\x5c\x43\x32\xf2\x43\x29\xdf\xeb\x87\xd5\xda\xd5\xc7\x65\x79\x8e\x07\xc0\x62\x4a\x9b\x8e\x2c\x83\xf7\x60\xe1\x3d\x40\xdf\x2e\x98\xa1\x7b\xa8\x47\xb7\x8b\x12\x06\x96\x77\xf8\x30\xda\x6f\x51\xb6\x16\x31\x48\xad\x06\x5b\x1a\xaf\x93\xd5\x23\xce\x41\x96\x26\x25\x9c\xd8\x55\x7d\x99\xa4\xea\x7b\xbc\x56\x70\x02\x0e\x3c\x82\x03\x27\xb0\x5d\x40\xeb\x2d\x7b\xf9\xf4\x89\x55\x1c\x70\xfe\x7a\xb6\x75\x56\x18\x64\xb5\x05\x35\xc4\x65\x03\xb4\x2a\xd0\xc9\x9d\x08\xa0\xd5\xe7\xb6\xc1\x4d\xcb\xdc\x6a\x1e\xc2\x18\x16\x3f\xdf\xff\xe3\x46\x1b\x74\xff\x78\x78\x79\x75\x71\x7f\x31\xfc\xc4\xb4\x62\x8c\xee\xc0\xf9\xc4\x46\xa3\x73\xe7\xac\x1a\x6a\x84\x27\x4d\x68\xf5\xeb\xaa\x85\xf5\x73\x1f\x2d\x16\x98\x45\x97\x33\x42\x23\x4f\x56\x10\x09\xac\x62\xc1\x0c\xed\x59\x93\xe7\xea\xda\xd5\x97\xcb\xe9\x85\x34\xf1\x4d\x90\x42\x84\xc7\xb4\x0d\x32\x44\x14\xbf\x41\xfa\xf0\xdb\x10\x8e\xab\x0c\x27\x47\xa2\x5d\x29\x77\xf7\xe5\x0b\x9c\x56\xec\xbe\x50\x3c\xee\x4f\x28\x49\x91\x8d\x45\xbd\xb6\x9c\x88\x2c\xeb\xf2\xbd\x09\x3b\xba\x6a\x86\x01\x60\xea\x9b\x7f\xdf\xf1\x08\x7b\x4a\xc4\xb8\x81\x27\x4d\x5c\x0b\xdd\x0d\x5d\x33\xe5\xd5\xda\xac\x11\xb9\x93\x5a\x0d\xb7\xdb\xaa\xe5\xf9\xf2\x25\x61\xb3\xee\x63\xc8\x9b\x88\xcd\x49\x99\x32\x61\xbe\x88\x15\x8e\xee\x34\x9b\x87\x69\x4b\x3f\xbc\x15\x7c\x81\x85\xda\x7c\xd4\x05\x5d\xf3\xda\x0d\x1b\xce\x72\xee\xd7\xed\xd8\xb2\x1f\xbe\x65\x4b\xff\x67\xed\xb9\x71\xf5\x56\x85\x11\xa6\xbb\x5e\xcf\x29\x33\x39\xa9\xdc\x1d\x7d\xdb\xed\x76\x03\xf3\x3e\xa8\x72\xe2\xad\x22\x0a\xe1\xc3\x49\xba\x36\xa7\x0d\xce\xa9\x7f\x5a\x67\x96\x65\xce\x77\x77\x9e\x59\xac\x0d\x8e\xf9\xab\x05\xd4\x80\x92\xcb\xe9\xd7\xcb\xed\x99\x0a\xa7\x5a\xfa\xe9\xcb\x97\x2f\x03\xfb\xfe\x60\xf9\x9e\x63\x0c\xce\x69\x27\x2e\xf3\xb7\x7c\x0c\x78\x86\x14\x7b\x84\x4e\x3b\x35\xc4\xaf\x95\xb3\x24\x78\xf5\x8a\xaf\xf5\x06\xbb\xd0\x35\x89\xca\x02\xd3\xb9\x49\xdf\x59\xf9\x35\x12\x4d\xa4\x29\x04\x58\xb3\x46\x9d\x09\x59\x00\x84\x49\x2c\xd4\x2b\x3c\xe1\x02\x7b\x49\x15\x64\xd9\xda\x09\xc5\x84\x08\xa9\x8c\xbc\x26\x63\xd4\x5d\xf0\x20\x9b\x03\x9c\x24\x60\xb2\x4c\x53\xef\xbb\xb1\x09\xdd\x6e\x84\x14\xea\xd9\x0a\x55\x2e\xa7\x27\xeb\x39\x3d\x1b\x23\x89\x7f\xf8\xbe\x9d\xeb\xcf\xc6\x8a\x23\x2f\x66\x58\x86\x68\x81\x3d\xcc\x42\x1e\xe1\x0f\xef\xaf\xb5\x97\x71\xa6\xa3\xa9\x5c\x4e\x5b\x75\xc5\xad\x2e\x2f\xaa\xd3\x40\xa6\x91\xb1\x17\x0b\x52\xc3\x5e\x91\xc8\x5b\x07\x64\x28\xb4\xc4\x77\x3a\x4b\xdd\xb2\x69\x29\x43\x31\x34\xc7\x85\x3c\x55\x05\xae\x94\xe8\xca\xc9\x6d\x2b\x55\xc3\x6f\xc8\x45\x46\xbf\x87\x34\x60\x49\x77\x61\xda\xaf\x58\x90\x26\xa2\x67\xf6\x57\x7f\x52\x1f\x5a\x6a\xd1\x34\x94\x3d\x4d\x5a\xb9\x41\xd3\x4c\xfb\x5a\x34\x03\xd8\x76\xb8\x5f\xd3\xf5\x26\xac\x85\x0e\x0f\x4d\x71\xd6\xe3\x35\xae\x8b\x1a\x74\x84\x9a\x56\x45\x7e\xc4\x57\xe9\xc1\x68\x33\x6b\x22\x4d\x86\x2e\x8d\x0d\x63\x3d\x7f\x86\x6f\xcc\xa3\x4d\x21\xfa\xa0\x46\x80\x21\x25\xf5\xbd\xe0\x21\xce\xb6\x7d\x93\x4a\x79\xde\x90\x34\x13\xa0\x03\x43\x12\x60\xde\x10\x8a\xe1\xc5\x0b\xc8\xdd\xbe\xc7\x28\xc2\x62\xe7\xe1\x0d\x91\x2a\xf7\xe8\x15\xe5\xa5\xc0\x12\x04\xf0\x56\x9f\x18\xc8\x38\x0c\xb1\x94\xc7\x70\x41\xa9\x99\x0e\x9b\x45\x2e\x6e\xaf\x25\x20\x81\x41\xc6\x8b\x05\x17\x0a\x47\xfe\x76\x47\x80\xa9\xc4\x3b\xf2\x10\xc5\x42\x79\xee\x7d\x49\x00\xe3\x0a\x26\x31\xa5\x9b\xad\x28\x20\xcc\x4c\x6a\x61\x2c\xf8\x4a\x62\xe1\xe7\x0f\x30\x17\xa6\x82\x00\xb2\x99\xf5\x47\x22\x63\x44\xc9\x7f\xcc\x00\x4c\x4b\x07\xc4\xec\x9b\x05\xc1\xe1\x0c\x09\x05\x0b\x14\x7e\xd6\x2e\x93\xf1\x27\x73\x6a\x6d\x67\x9e\xbb\xcc\x0b\xd0\x4d\xc8\xa9\xdf\x75\xdb\xf0\xe8\x26\x6c\xd2\xed\xc1\xd0\x0d\xb9\xb0\xd2\xdc\xd1\x53\xde\xfc\xb5\xba\x28\x1f\x23\x0a\x3a\x13\x80\xc4\x82\x60\x99\xbd\x35\x5d\x07\x52\xe8\xce\x3c\xfe\x5d\x87\xd2\xe1\x28\xc7\x9d\xc5\x1e\xed\x66\x97\x5a\xbc\x09\x42\x05\x05\xea\x63\xce\xcb\x48\x7a\xd9\xda\xf9\x85\xed\x44\x1a\x43\x7c\x0a\x0b\x06\xa9\x2a\x0a\x4a\xf0\x91\x10\x68\x73\x6f\x1c\xea\x1e\x8d\x29\x2e\xac\xbf\xeb\xfc\x5a\x98\x22\xe1\x67\x09\x83\x12\x96\xe1\xe3\xb2\x07\xa7\x6d\x98\xf4\xc0\xed\x7e\xe3\x3e\xb5\x2b\xbd\xc6\x10\x75\x2d\xd5\xcb\x7d\x64\x29\xdd\xcb\x7d\x74\x19\xa1\xbf\x9f\x34\x47\x7b\x00\x71\x9e\xfa\x10\xf2\x02\xbd\x66\x18\x55\xa8\x90\x2f\xb4\xea\x75\x76\x29\x1f\xa9\x22\x8a\xe2\x1e\xb8\x3f\x13\xa9\xf8\x54\xa0\xb9\x5b\x5e\xd2\x24\x91\x1e\xfc\xd8\xed\x96\xdf\xd9\x5c\xd1\x83\xef\x7f\xac\x7a\x79\xb1\x26\xb2\x07\x8f\xe9\x22\xb7\x58\x84\x98\x29\x42\x75\x47\x3e\x27\xcc\x94\xfb\x3d\x1d\xf7\x29\x9f\xde\xe9\xfc\xdd\x03\xdd\xc8\xb5\xed\xa9\xf7\xec\x9f\x0a\x25\x2c\x77\x04\xdf\x20\x85\x59\xb8\x01\xef\x7f\xff\x95\xad\xa2\xec\x0a\x6e\x8a\xa7\x98\x45\x3d\x78\x5c\x70\x49\xb4\x6a\x7a\xe0\x8e\xb9\x52\x7c\xee\xee\x8c\xc6\x2a\x94\x69\xfd\xde\x16\x0c\x95\x16\x7e\x43\x18\xb6\xfe\x96\xe5\x81\x29\x56\x49\x92\x7a\xb5\xb9\x8e\x3c\xd7\xc8\xf8\x3d\x22\x4b\x33\x76\xdc\x8d\x91\x28\x8a\x40\x71\x7d\x68\x0b\x09\x2b\xa2\x66\x10\x72\x21\x70\xa8\x60\x91\xe9\x0f\x4c\xf2\x55\xdc\xf8\x5a\xaf\x0c\x92\xd3\x78\x6e\x4e\x7c\xd8\xdd\x19\x31\x15\xe6\x6c\xa7\x76\xce\xa6\x85\x68\x90\xef\xe2\xf9\x18\x8b\x5f\x26\x97\x96\xdd\x6b\xd5\xce\xdc\x92\x05\xfc\x45\x2c\x67\x5e\x55\x7d\x58\x20\xa8\xae\x7d\x74\x16\xea\x81\x2b\x95\x20\x6c\x5a\x61\x76\xfa\x5a\xd8\xc6\x90\x60\x7d\xda\xb5\xa9\x53\x70\x63\x05\x8a\x73\xaa\xc8\xc2\xad\xce\x9f\xd5\x0b\x84\x88\x86\xbd\xfc\x87\x9d\x87\xa6\x52\x2d\x19\xc5\x6c\xa9\x23\xd5\x06\xc1\x57\x87\x0c\xfe\x72\x87\x37\xd0\xde\xeb\x77\xa1\x03\x9e\xfd\x27\x80\xc8\x58\x89\xed\x7f\x05\x5f\xe9\x4a\x68\xcf\x50\x38\x1d\x0b\x29\x5b\x7a\x69\x75\xdf\xa0\x31\xa6\x7a\x07\x27\xe0\xf6\xc0\x85\x93\xbd\x73\xc1\x2d\x28\x5f\xf1\x5b\x81\x43\xa2\xbb\x5d\xef\x87\xd6\x01\xbc\xee\xa7\x6f\x3e\xb9\x76\x3b\xba\x21\x29\xed\xc0\xe2\x80\x58\xe2\xb0\xfa\x48\xa0\x71\x80\x5d\xee\xfe\xeb\x0b\x1e\x48\x74\xac\xbb\xc5\x26\xdf\xd4\x69\xe7\x23\xc1\x2b\x93\x75\x76\xa4\x69\x5e\xdd\x7c\xa6\xc6\x9f\x58\xf0\xae\x83\x1a\xdf\x35\xb5\xab\xa7\x39\xda\x69\x74\x2d\x94\x13\xf0\xec\xd2\x2b\xe5\xcd\x4c\xcb\x96\x8d\x57\x59\x76\xf4\xcc\x07\xf9\xb4\x43\xda\x66\xcd\xaa\xaf\xd8\xb6\x54\x38\xab\x79\x7e\xc9\x63\xb6\x53\xdd\x17\x0b\x81\x7d\x65\x80\x15\xa3\x83\xcb\xd0\xfd\xd5\xb5\x90\x46\x15\x93\xec\xdc\x72\x26\xd6\x14\x0f\xaf\xaa\xa2\x2b\x48\xdf\x02\xaa\x13\x3d\xec\x8e\x6c\x80\xd1\x08\xaa\xe6\xba\x05\x00\x5b\x9e\x64\x7f\x9d\x12\xa6\x72\xb8\xa7\x84\x19\x30\x46\xfb\xbe\x5c\x50\xa2\x3c\xe7\x13\x73\xaa\x4a\x15\xbb\xc0\x35\x8b\xf0\xba\xbc\xdf\xaa\xef\x1b\x46\xf8\xbe\xcf\x1b\x29\x0a\x18\x58\xfa\x21\x19\xf9\x4a\x90\x79\x55\xa3\x60\x7c\x40\x7b\xa0\x4c\xa8\x13\xca\x04\x78\x30\x84\xd1\x49\x50\xd5\x62\x99\x4f\x57\x84\xe1\x61\x77\x64\x7e\xed\xf0\x17\xf3\x2b\x07\x2b\x2a\x67\x0e\xdf\x97\x4a\xc8\xfc\xca\x9b\x74\xdc\xf8\x86\x72\xa4\x3c\xcb\x3d\xec\x56\x7d\x82\x4a\x59\xd6\x95\x2c\xdf\x8d\xea\xda\x40\x8d\xf3\x98\xc8\x77\xe8\x9d\xb7\xb6\x5f\xae\xed\xcd\xa6\x55\x8b\x2c\x65\xcb\x9f\xce\x79\x6a\x0d\xc9\xde\xf6\xc5\xef\x84\xd8\xd8\xda\x70\x5d\xb7\x21\xa8\xfe\x94\x91\x5e\xab\x99\x0e\x96\x09\x8e\x61\x0e\x4e\x66\x90\xfd\xbc\xc5\x1e\x86\xa9\x28\xc7\x3a\x43\x4c\xe9\xd7\x21\xac\x15\xb9\x69\x90\x97\xa3\x3e\x39\x39\xb8\x77\x6d\xf2\xbb\x82\xa2\xec\x81\xf5\xf7\x9f\xd7\x73\xf5\xd1\x80\x7b\x07\x4f\x92\x69\x77\xa3\xea\x53\x45\xb3\x85\x62\xc5\x4b\xc3\x1e\x8a\x15\x50\x1e\x22\xfa\x7b\xd2\x19\xfd\xf1\xf8\x68\x52\xd1\xd3\xd3\x1f\xc5\x85\x77\x1a\xba\x52\x0e\xd8\x4a\x69\x83\x63\x6e\x9c\x36\xec\x74\x50\x05\x79\xdb\xde\xaf\x19\x77\xc4\x5f\x9b\x5f\x34\x79\x78\x89\xcb\xa6\x97\x1f\xd9\x79\xd5\xbf\xfb\x31\x3f\xfa\x71\x5b\xed\x7c\x27\xd1\x90\x12\xfb\x81\xfd\xa1\xda\x51\x7f\xcc\xa3\x0d\xd8\x89\xd9\xc0\xb1\xea\x73\xce\x8f\xfa\xc7\x9d\xce\x15\x59\x82\x9a\x21\x05\x2b\x42\x29\xcc\x38\xcd\x7a\x6f\x9b\x84\x3b\x9d\xf3\xa3\x7e\x44\x96\x40\xa2\x81\x93\x95\xd4\xce\xf9\x2d\xc5\x48\x62\xb0\x9f\x39\x01\xd9\xd0\xad\x01\xc1\x84\x50\xdc\x0f\x22\xb2\x3c\x3f\xea\x8f\x63\xa5\x38\xb3\xf9\xd8\xb5\x37\x2e\x70\x66\x66\x30\x03\x77\x47\x1f\xee\xb9\xbd\xb5\x23\xc2\x7e\x60\xe9\xf5\x36\x34\x7c\xb3\x1d\xf3\xf3\xbb\xff\x07\x00\x00\xff\xff\x04\x35\xf4\x99\x86\x27\x00\x00")

func hdrhistogramTemplateBytes() ([]byte, error) {
	return bindataRead(
		_hdrhistogramTemplate,
		"hdrhistogram.template",
	)
}

func hdrhistogramTemplate() (*asset, error) {
	bytes, err := hdrhistogramTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hdrhistogram.template", size: 10118, mode: os.FileMode(420), modTime: time.Unix(1486112737, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hdrhistogram.template": hdrhistogramTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"hdrhistogram.template": &bintree{hdrhistogramTemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

